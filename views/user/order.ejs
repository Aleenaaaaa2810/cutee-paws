<%- include("../../views/partials/user/header") %>
<head>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
    <style>
        .order-container {
            max-width: 800px;
            margin: auto;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }

        .header h1 {
            font-size: 1.8rem;
            color: #333;
        }

        .product-details {
            margin-bottom: 20px;
        }

        .product-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #ddd;
        }

        .product-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
        }

        .product-info {
            flex-grow: 1;
            margin-left: 15px;
        }

        .product-info h4 {
            font-size: 1rem;
            color: #333;
        }

        .product-info p {
            font-size: 0.9rem;
            color: #666;
        }

        .total-price {
            text-align: right;
            font-size: 1.2rem;
            margin-top: 10px;
            font-weight: bold;
            color: #333;
        }

        .address-section {
            margin-top: 20px;
        }

        .address-section h3 {
            font-size: 1.2rem;
            margin-bottom: 10px;
        }

        .address-card {
            display: flex;
            align-items: flex-start;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 10px;
            background-color: #f9f9f9;
        }

        .address-radio {
            margin-right: 10px;
            cursor: pointer;
        }

        .address-info {
            font-size: 0.9rem;
        }

        .add-address {
            display: inline-block;
            background-color: #4caf50;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .add-address:hover {
            background-color: #45a049;
        }

        .checkout-btn {
            display: block;
            margin: 20px auto;
            background-color: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
        }

        .checkout-btn:hover {
            background-color: #0056b3;
        }
    </style>
</head>


<body>
    <div class="order-container">
        <div class="header">
            <h1>Checkout Page</h1>
        </div>

        <!-- Product Details -->
        <div class="product-details">
            <h3>Your Products</h3>
            <% cart.items.forEach(item => { %>
                <div class="product-item">
                    <img src="/uploads/<%= item.productId.productImage[0] %>" alt="Product Image">
                    <div class="product-info">
                        <h4><%= item.productId.name %></h4>
                        <p>Quantity: <%= item.quantity %></p>
                        <p>Price: ₹<%= item.price %></p>
                    </div>
                </div>
            <% }) %>
        </div>

        <!-- Total Price -->
        <div class="total-price">
            <h3>Total Price: ₹<span id="totalPrice"></span></h3>
        </div>

        <!-- Address Section -->
        <div class="address-section">
            <h3>Choose Delivery Address</h3>
            <% if (userAddress && userAddress.length > 0) { %>
                <% userAddress.forEach((doc) => { %>
                    <% doc.address.forEach((address) => { %>
                        <div class="address-card">
                            <input type="radio" name="address" value="<%= address._id %>" class="address-radio" required>
                            <div class="address-info">
                                <strong><%= address.addressType %></strong> - <%= address.city %>, <%= address.state %>, <%= address.pincode %><br>
                                <strong>Name:</strong> <%= address.name %>, <strong>Phone:</strong> <%= address.phone %>
                            </div>
                        </div>
                    <% }) %>
                <% }) %>
            <% } else { %>
                <p>No addresses available.</p>
            <% } %>
            <a href="/proceddaddAddress" class="add-address">Add New Address</a>
        </div>

        <!-- Payment Method Section -->
        <div class="payment-section">
            <h3>Select Payment Method</h3>
            <div class="payment-card">
                <input type="radio" id="cod" name="paymentMethod" value="Cash on Delivery" required>
                <label for="cod">Cash on Delivery</label>
            </div>
            <div class="payment-card">
                <input type="radio" id="razorpay" name="paymentMethod" value="Razorpay" required>
                <label for="razorpay">Razorpay</label>
            </div>
            <div class="payment-card">
                <input type="radio" id="wallet" name="paymentMethod" value="Wallet" required>
                <label for="wallet">Wallet</label>
            </div>
        </div>

        <!-- Checkout Button -->
        <button class="checkout-btn" onclick="proceedToCheckout()">Place Order</button>
    </div>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    // Calculate total price
    const items = <%- JSON.stringify(cart.items) %>;
    const totalPriceElement = document.getElementById('totalPrice');
    const totalPrice = items.reduce((total, item) => total + item.quantity * item.price, 0);
    totalPriceElement.textContent = totalPrice;

    // Handle checkout
   async function proceedToCheckout() {
    const selectedAddress = document.querySelector('input[name="address"]:checked');
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');

    if (!selectedAddress) {
        Swal.fire({
            icon: 'warning',
            title: 'No Address Selected',
            text: 'Please select a delivery address before proceeding.',
        });
        return;
    }

    if (!selectedPayment) {
        Swal.fire({
            icon: 'warning',
            title: 'No Payment Method Selected',
            text: 'Please select a payment method before proceeding.',
        });
        return;
    }

    const orderDetails = {
        items,
        totalPrice,
        addressId: selectedAddress.value,
        paymentMethod: selectedPayment.value,
    };

    try {
        if (selectedPayment.value === 'Cash on Delivery') {
            // Handle Cash on Delivery
            const response = await fetch('/submitOrders', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(orderDetails),
            });

            const data = await response.json();

            if (response.ok && data.success) {
                Swal.fire({
                    icon: 'success',
                    title: 'Order Placed!',
                    text: 'Your order has been placed successfully!',
                }).then(() => {
                    window.location.href = '/orderSummary';
                });
            } else {
                throw new Error(data.error || 'Failed to place order');
            }
        } else if (selectedPayment.value === 'Razorpay') {
            // Handle Razorpay
            const options = {
                key: "<%= process.env.RAZORPAY_ID_KEY %>",
                amount: totalPrice * 100,
                currency: "INR",
                name: "Your Shop Name",
                description: "Order Payment",
                handler: async function (response) {
                    // Successful Razorpay payment
                    orderDetails.razorpayDetails = {
                        paymentId: response.razorpay_payment_id,
                        orderId: response.razorpay_order_id,
                        signature: response.razorpay_signature,
                    };

                    const submitResponse = await fetch('/submitOrders', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(orderDetails),
                    });

                    const submitData = await submitResponse.json();

                    if (submitResponse.ok && submitData.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful',
                            text: 'Your payment and order have been placed successfully!',
                        }).then(() => {
                            window.location.href = '/orderSummary';
                        });
                    } else {
                        throw new Error(submitData.error || 'Failed to save order after payment');
                    }
                },
                prefill: {
                    name: "Customer Name",
                    email: "customer@example.com",
                    contact: "1234567890",
                },
                theme: { color: "#F37254" },
            };

            const rzp = new Razorpay(options);
            rzp.open();

            // Razorpay failure handling
            rzp.on('payment.failed', async function (response) {
                console.error('Payment Failed:', response.error);
                // Save order with payment failed status
                orderDetails.razorpayDetails = { failed: true };
                const failResponse = await fetch('/submitOrders', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderDetails),
                });

                const failData = await failResponse.json();
                if (failResponse.ok && failData.success) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Payment Failed',
                        text: 'Payment failed, but your order has been placed. You can retry the payment from your order summary.',
                    }).then(() => {
                       
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error Saving Order',
                        text: 'An error occurred while saving your order. Please try again later.',
                    });
                }
            });
        }
    } catch (error) {
        console.error('Checkout Error:', error);
        Swal.fire({
            icon: 'error',
            title: 'Unexpected Error',
            text: 'An error occurred during checkout. Please try again later.',
        });
    }
}


</script>


</body>
<%- include("../../views/partials/user/footer.ejs") %>
</html>
