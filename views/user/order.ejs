<%- include("../../views/partials/user/header") %>
<head>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  </head>
    <style>
        .order-container {
            max-width: 800px;
            margin: auto;
            background-color: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

        .header {
            text-align: center;
            margin-bottom: 20px;
        }

        .header h1 {
            font-size: 1.8rem;
            color: #333;
        }

        .product-details {
            margin-bottom: 20px;
        }

        .product-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 0;
            border-bottom: 1px solid #ddd;
        }

        .product-item img {
            width: 80px;
            height: 80px;
            object-fit: cover;
            border-radius: 8px;
        }

        .product-info {
            flex-grow: 1;
            margin-left: 15px;
        }

        .product-info h4 {
            font-size: 1rem;
            color: #333;
        }

        .product-info p {
            font-size: 0.9rem;
            color: #666;
        }

        .total-price {
            text-align: right;
            font-size: 1.2rem;
            margin-top: 10px;
            font-weight: bold;
            color: #333;
        }

        .address-section {
            margin-top: 20px;
        }

        .address-section h3 {
            font-size: 1.2rem;
            margin-bottom: 10px;
              margin-right: 549px;
        }

        .address-card {
            display: flex;
            align-items: flex-start;
            padding: 10px;
            border: 1px solid #ddd;
            border-radius: 5px;
            margin-bottom: 10px;
            background-color: #f9f9f9;
        }

        .address-radio {
            margin-right: 10px;
            cursor: pointer;
        }

        .address-info {
            font-size: 0.9rem;
        }

        .add-address {
            display: inline-block;
            background-color: #3B1C32;
            color: white;
            padding: 5px 10px;
            border-radius: 5px;
            text-decoration: none;
            font-size: 0.9rem;
        }

        .add-address:hover {
            background-color: #A64D79;
        }

        .checkout-btn {
            display: block;
            margin: 20px auto;
            background-color: #6A1E55;
            color: white;
            border: none;
            padding: 10px 20px;
            font-size: 1rem;
            border-radius: 5px;
            cursor: pointer;
        }

        .checkout-btn:hover {
            background-color: #6A1E55;
        }


        .payment-section {
    margin-top: 20px;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 10px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

.payment-section h3 {
    font-size: 1.2rem;
    margin-bottom: 20px;
    color: #333;
    text-align: center;
    font-weight: bold;
}

.payment-card {
    display: flex;
    align-items: center;
    gap: 15px;
    background-color: white;
    padding: 15px;
    margin-bottom: 10px;
    border-radius: 8px;
    border: 1px solid #ddd;
    transition: box-shadow 0.3s, transform 0.3s;
    cursor: pointer;
}

.payment-card:hover {
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
    transform: translateY(-2px);
}

.payment-card input[type="radio"] {
    margin: 0;
    accent-color: #6A1E55;
    transform: scale(1.3);
}

.payment-card label {
    font-size: 1rem;
    color: #333;
    cursor: pointer;
    font-weight: 500;
}

.payment-icon {
    width: 40px;
    height: 40px;
}

    </style>
</head>


<body>
    <div class="order-container">
        <div class="header">
            <h1>Checkout Page</h1>
        </div>

        <!-- Product Details -->
        <div class="product-details">
            <h3>Your Products</h3>
            <% cart.items.forEach(item => { %>
                <div class="product-item">
                    <img src="/uploads/<%= item.productId.productImage[0] %>" alt="Product Image">
                    <div class="product-info">
                        <h4><%= item.productId.name %></h4>
                        <p>Quantity: <%= item.quantity %></p>
                        <p>Price: ₹<%= item.price %></p>
                    </div>
                </div>
            <% }) %>
        </div>
        

        <div class="coupon-section">
            <h3>Apply Coupon</h3>
            <div style="display: flex; align-items: center; gap: 10px;">
                <input type="text" id="couponCode" placeholder="Enter Coupon Code" style="flex-grow: 1; padding: 10px; border-radius: 5px; border: 1px solid #ddd;">
                <p id="couponMessage" style="margin-top: 10px; color: red;"></p>
                <button onclick="showCoupons()" style="margin-top: 10px; padding: 10px 20px; background-color: #3B1C32; color: white; border: none; border-radius: 5px; cursor: pointer;">View All Coupons</button>
            </div>
           
        </div>
        
        <!-- Coupons Modal -->
        <div id="couponsModal" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 1000; justify-content: center; align-items: center;">
            <div style="background-color: white; padding: 20px; border-radius: 10px; width: 50%; max-height: 80%; overflow-y: auto;">
                <h3>Available Coupons</h3>
                <form id="couponForm">
                    <% for (let i = 0; i < coupon.length; i++) { 
                        const isCouponValid = totalPrice >= coupon[i].minimumPrice && new Date() <= new Date(coupon[i].expireOn); 
                        if (isCouponValid) { %>
                            <label style="display: block; margin-bottom: 10px;">
                                <input 
                                    type="radio" 
                                    name="selectedCoupon" 
                                    value="<%= coupon[i].name %>" 
                                    data-discount="<%= coupon[i].offerPrice %>" 
                                    data-minimum-price="<%= coupon[i].minimumPrice %>" 
                                    data-expire-on="<%= coupon[i].expireOn %>" 
                                    style="margin-right: 10px;" 
                                />
                                <%= coupon[i].name %> - Valid from <%= new Date(coupon[i].createdOn).toLocaleDateString('en-US') %> to <%= new Date(coupon[i].expireOn).toLocaleDateString('en-US') %> | Offer Price: ₹<%= coupon[i].offerPrice %> | Minimum Price: ₹<%= coupon[i].minimumPrice %>
                            </label>
                    <%  } } %>
                
                    <div id="couponMessage" style="color: red; margin-top: 10px; display: none;">Invalid coupon selection. Please check the minimum price or expiry date.</div>
                
                    <div style="margin-top: 20px;">
                        <button type="button" onclick="selectCouponFromModal()" style="padding: 10px 20px; background-color: #28a745; color: white; border: none; border-radius: 5px; cursor: pointer;">OK</button>
                        <button type="button" onclick="closeModal()" style="padding: 10px 20px; background-color: #dc3545; color: white; border: none; border-radius: 5px; cursor: pointer;">Close</button>
                    </div>
                </form>
            </div>
        </div>
        
        <div class="total-price">  
            <h3 style="color: red;">Discount: ₹<span id="discountAmount">0</span></h3>  
            <h3 style="color: red;">Delivery Charge: ₹60</h3>  
            <h3 style="color: red;">Total Price: ₹<span id="totalPrice"><%= totalPrice %></span></h3>  
            <h3 style="color: green; font-weight: bold;">Final Total Price: ₹<span id="finalTotalPrice"><%= totalPrice + 60 %></span></h3>  
        </div>
        
        
        <script>
            function selectCouponFromModal() {
                const selectedCoupon = document.querySelector('input[name="selectedCoupon"]:checked');
                const totalPrice = parseFloat(document.getElementById('totalPrice').innerText);
                const messageDiv = document.getElementById('couponMessage');
        
                if (selectedCoupon) {
                    const minimumPrice = parseFloat(selectedCoupon.dataset.minimumPrice);
                    const expireOn = new Date(selectedCoupon.dataset.expireOn);
                    const currentDate = new Date();
                    const discount = parseFloat(selectedCoupon.dataset.discount);
        
                    if (totalPrice >= minimumPrice && currentDate <= expireOn) {
                        document.getElementById('discountAmount').innerText = discount;
                        document.getElementById('finalTotalPrice').innerText = totalPrice + 60 - discount;
                        alert("Coupon applied successfully!");
                        messageDiv.style.display = 'none';
                        closeModal();
                    } else {
                        messageDiv.style.display = 'block';
                        messageDiv.textContent = "Invalid coupon selection. The total price must be at least ₹" + minimumPrice + " and the coupon must not be expired.";
                    }
                } else {
                    messageDiv.style.display = 'block';
                    messageDiv.textContent = "Please select a coupon.";
                }
            }
        
           

        </script>
        
        <!-- Address Section -->
        <div class="address-section">
            <h3>Choose Delivery Address</h3>
            <% if (userAddress && userAddress.length > 0) { %>
                <% userAddress.forEach((doc) => { %>
                    <% doc.address.forEach((address) => { %>
                        <div class="address-card">
                            <input type="radio" name="address" value="<%= address._id %>" class="address-radio" required>
                            <div class="address-info">
                                <strong><%= address.addressType %></strong> - <%= address.city %>, <%= address.state %>, <%= address.pincode %><br>
                                <strong>Name:</strong> <%= address.name %>, <strong>Phone:</strong> <%= address.phone %>
                            </div>
                        </div>
                    <% }) %>
                <% }) %>
            <% } else { %>
                <p>No addresses available.</p>
            <% } %>
            <a href="/addAddresseses" class="add-address">Add New Address</a>
        </div>

        <!-- Payment Method Section -->
        <div class="payment-section">
            <h3>Select Payment Method</h3>
            <div class="payment-card">
                <input type="radio" id="cod" name="paymentMethod" value="Cash on Delivery" required>
                <label for="cod">Cash on Delivery</label>
            </div>
            <div class="payment-card">
                <input type="radio" id="razorpay" name="paymentMethod" value="Razorpay" required>
                <label for="razorpay">Razorpay</label>
            </div>
            <div class="payment-card">
                <input type="radio" id="wallet" name="paymentMethod" value="Wallet" required>
                <label for="wallet">Wallet</label>
            </div>
        </div>

        <!-- Checkout Button -->
        <button class="checkout-btn" onclick="proceedToCheckout()">Place Order</button>
    </div>


<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script>
    // Calculate total price
    const items = <%- JSON.stringify(cart.items) %>;
    const totalPriceElement = document.getElementById('totalPrice');
    const totalPrice = items.reduce((total, item) => total + item.quantity * item.price, 0);
    totalPriceElement.textContent = totalPrice;


    

    // Handle checkout
   async function proceedToCheckout() {
    const selectedAddress = document.querySelector('input[name="address"]:checked');
    const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
    const selectedCoupon = document.getElementById("couponCode").value; // Coupon code/name

   

    if (!selectedAddress) {
        Swal.fire({
            icon: 'warning',
            title: 'No Address Selected',
            text: 'Please select a delivery address before proceeding.',
        });
        return;
    }

    if (!selectedPayment) {
        Swal.fire({
            icon: 'warning',
            title: 'No Payment Method Selected',
            text: 'Please select a payment method before proceeding.',
        });
        return;
    }

    const orderDetails = {
        items,
        totalPrice,
        addressId: selectedAddress.value,
        paymentMethod: selectedPayment.value,
        selectedCoupon,
    };


    try {
        if (selectedPayment.value === 'Cash on Delivery') {
    // Check if the order amount exceeds the limit for Cash on Delivery
    if (finalTotalPrice > 1000) {
        Swal.fire("Cash on Delivery is only available for orders below ₹1000");
        return; // Stop further execution if the condition is not met
    }

    // Handle Cash on Delivery
    const response = await fetch('/submitOrders', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderDetails),
    });

    const data = await response.json();

    if (response.ok && data.success) {
        Swal.fire({
            icon: 'success',
            title: 'Order Placed!',
            text: 'Your order has been placed successfully!',
        }).then(() => {
            window.location.href = '/orderSummary';
        });
    } else {
        throw new Error(data.error || 'unavialable stock please increse your quantity or remove the product');
    }
}


         else if (selectedPayment.value === 'Razorpay') {
            const finalTotalPrice = parseFloat(document.getElementById('finalTotalPrice').textContent); // Get final price

            // Handle Razorpay
            const options = {
                key: "<%= process.env.RAZORPAY_ID_KEY %>",
                amount: finalTotalPrice *100,
                currency: "INR",
                name: "Your Shop Name",
                description: "Order Payment",
                handler: async function (response) {
                    // Successful Razorpay payment
                    orderDetails.razorpayDetails = {
                paymentId: response.razorpay_payment_id,
                orderId: response.razorpay_order_id,
                signature: response.razorpay_signature,
                paymentStatus: 'success'  // Fixed property name to match the schema
            };
                    const submitResponse = await fetch('/submitOrders', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(orderDetails),
                    });

                    const submitData = await submitResponse.json();

                    if (submitResponse.ok && submitData.success) {
                        Swal.fire({
                            icon: 'success',
                            title: 'Payment Successful',
                            text: 'Your payment and order have been placed successfully!',
                        }).then(() => {
                            window.location.href = '/orderSummary';
                        });
                    } else {
                        throw new Error(submitData.error || 'Failed to save order after payment');
                    }
                },
                prefill: {
                    name: "Customer Name",
                    email: "customer@example.com",
                    contact: "1234567890",
                },
                theme: { color: "#F37254" },
            };

            const rzp = new Razorpay(options);
            rzp.open();

            // Razorpay failure handling
            rzp.on('payment.failed', async function (response) {
                console.error('Payment Failed:', response.error);
                // Save order with payment failed status
                orderDetails.razorpayDetails = { paymentStatus: 'failed' };

            
                const failResponse = await fetch('/submitOrders', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(orderDetails),
                });

                const failData = await failResponse.json();
                if (failResponse.ok && failData.success) {
                    Swal.fire({
                        icon: 'warning',
                        title: 'Payment Failed',
                        text: 'Payment failed, but your order has been placed. You can retry the payment from your order summary.',
                    }).then(() => {
                        window.location.href = '/shop';
                       
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Error Saving Order',
                        text: 'An error occurred while saving your order. Please try again later.',
                    });
                }
            });
        }




        else if (selectedPayment.value === 'Wallet') {
            const finalTotalPrice = parseFloat(document.getElementById('finalTotalPrice').textContent); // Get final price

    // Handle Wallet Payment
    const walletResponse = await fetch('/wallet-payment', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(orderDetails),
    });

    const walletData = await walletResponse.json();

    if (walletResponse.ok && walletData.success) {
        // Proceed to submit the order
        const response = await fetch('/submitOrders', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(orderDetails),
        });

        const data = await response.json();

        if (response.ok && data.success) {
    Swal.fire({
        icon: 'success',
        title: 'Order Placed!',
        text: 'Your wallet payment has been processed and order placed successfully!',
    }).then(() => {
        window.location.href = '/orderSummary';
    });
} else {
    throw new Error(data.error || 'Failed to process wallet payment');
}
} else {
    Swal.fire({
        icon: 'error',
        title: 'Wallet Payment Failed',
        text: walletData.error || 'Failed to process wallet payment. Please try again later.',
    });
}
}
} catch (error) {
    Swal.fire({
        icon: 'error',
        title: 'Error',
        text: error.message || 'An unexpected error occurred. Please try again later.',
    });
}
}




function showCoupons() {
    document.getElementById('couponsModal').style.display = 'flex';
}

function closeModal() {
    document.getElementById('couponsModal').style.display = 'none';
}

function selectCouponFromModal() {
    const totalPrice = parseFloat(document.getElementById('totalPrice').textContent);

    const selectedCoupon = document.querySelector('input[name="selectedCoupon"]:checked');
    if (selectedCoupon) {
        const couponName = selectedCoupon.value;
        const discount = parseFloat(selectedCoupon.getAttribute('data-discount')); // Ensure it's a number
        document.getElementById('couponCode').value = couponName; // Set the coupon name in the input box
        document.getElementById('discountAmount').textContent = discount; // Show the discount amount

        document.getElementById('finalTotalPrice').textContent =totalPrice-discount+60; 

        closeModal();
    }
    
}

        </script>
        



</body>
<%- include("../../views/partials/user/footer.ejs") %>
</html>