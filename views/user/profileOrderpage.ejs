<%- include("../../views/partials/user/header") %>
<title>Your Orders</title>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  h1 {
    text-align: center;
    margin-bottom: 30px;
    color: #1a202c;
  }
  .order-section {
    margin-bottom: 40px;
    border: 1px solid #e2e8f0;
    border-radius: 8px;
    overflow: hidden;
  }
  .order-header {
    background-color: #edf2f7;
    padding: 15px;
    border-bottom: 1px solid #e2e8f0;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  .order-header h2 {
    margin: 0;
    font-size: 1.2rem;
    color: #2d3748;
  }
  .order-header p {
    margin: 5px 0;
    font-size: 0.95rem;
    color: #4a5568;
  }
  table {
    width: 100%;
    border-collapse: collapse;
  }
  th, td {
    padding: 12px;
    text-align: left;
  }
  th {
    background-color: #e2e8f0;
    color: #2d3748;
    text-transform: uppercase;
    font-size: 0.85rem;
    letter-spacing: 0.05rem;
  }
  td {
    border-bottom: 1px solid #e2e8f0;
    font-size: 0.95rem;
    color: #4a5568;
  }
  tr:last-child td {
    border-bottom: none;
  }
  .no-orders {
    text-align: center;
    color: #718096;
    font-size: 1.1rem;
    margin-top: 20px;
  }
  .btn {
    display: inline-block;
    padding: 10px 20px;
    background-color: #3B1C32;
    color: #fff;
    text-decoration: none;
    border-radius: 5px;
    font-size: 0.95rem;
    transition: background-color 0.3s ease;
    border: none;
    cursor: pointer;
  }
  .btn:hover {
    background-color: #3B1C32;
  }
  .product-image {
  max-width: 100px;
  max-height: 100px;
  object-fit: cover; /* Ensures the image scales without distortion */
}


.invoice-btn {
  display: inline-block;
  padding: 10px 20px;
  background-color: #3B1C32; /* Set background color */
  color: #fff; /* Set text color */
  text-decoration: none;
  border: none;
  border-radius: 5px;
  font-size: 16px;
  font-weight: bold;
  text-align: center;
  cursor: pointer;
}

.invoice-btn:hover {
  background-color: #2A1424; /* Slightly darker shade for hover effect */
}


</style>
</head>

<title>Your Orders</title>
<link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
  /* CSS Styles as you provided */
</style>
</head>

<body>
  <div class="container">
    <h1>Your Orders</h1>

    <% if (orders && orders.length > 0) { %>
      <% orders.forEach(order => { %>
        <div class="order-section">
          <div class="order-header">
            <div>
              <h2>Order ID: <%= order.orderId %></h2>
              <p><strong>Date:</strong> <%= new Date(order.createdOn).toLocaleDateString() %></p>
              <p><strong>Status:</strong> <%= order.status %></p>
              <p><strong>Total Amount:</strong> ₹<%= order.finalAmount.toFixed(2) %></p>
              <p><strong>Payment Method:</strong> <%= order.paymentMethod || 'Not Available' %></p>

              <% if (order.status.toLowerCase() === 'delivered') { %>
              <a href="/invoice/<%= order.orderId %>" class="invoice-btn">Invoice</a>
              <% } %>
              
              <% if (order.razorpayDetails && order.razorpayDetails.paymentStatus === 'failed') { %>
                <% if (order.status !== 'Cancelled') { %>
                  <button class="btn retry-button" data-order-id="<%= order.orderId %>">Retry payment</button>
                <% } else { %>
                  <button class="btn retry-button" disabled>Retry payment (Cancelled)</button>
                <% } %>
              <% } %>
              
            </div>

            <% if (order.status.toLowerCase() === 'delivered') { %>
              <button class="btn return-button" data-order-id="<%= order.orderId %>">Return Order</button>
            <% } else if (order.status.toLowerCase() === 'cancelled') { %>
              <button class="btn disabled" data-message="This order is already cancelled">Cancelled</button>
            <% } else if (order.status.toLowerCase() === 'returned') { %>
              <button class="btn disabled" data-message="This order is already returned">Returned</button>
              <% } else if (order.status.toLowerCase() === 'return requested') { %>
                <button class="btn disabled" data-message="Your return request has been submitted">Return Requested</button>
              <% } else { %>
              <button class="btn cancel-button" data-order-id="<%= order.orderId %>">Cancel Order</button>
            <% } %>
          </div>

          <table>
            <thead>
              <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Price</th>
                <th>Total</th>
                <th>Image</th>
              </tr>
            </thead>
            <tbody>
              <% order.orderedItems.forEach(item => { %>
                <tr>
                  <td><%= item.product.name %></td>
                  <td><%= item.quantity %></td>
                  <td>₹<%= item.price.toFixed(2) %></td>
                  <td>₹<%= (item.quantity * item.price).toFixed(2) %></td>
                  <td>
                    <% if (item.product.productImage && item.product.productImage.length > 0) { %>
                      <img src="/uploads/<%= item.product.productImage[0] %>" alt="Product Image" class="product-image">
                    <% } else { %>
                      <p>No Image Available</p>
                    <% } %>
                  </td>
                </tr>
              <% }); %>
            </tbody>
          </table>
        </div>
      <% }); %>
    <% } else { %>
      <p class="no-orders">You have no orders yet.</p>
    <% } %>
  </div>

  <%- include("../../views/partials/user/footer.ejs") %>
  <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
  <script>
    // JavaScript for handling cancel, return, and retry actions
    document.querySelectorAll('.cancel-button').forEach(button => {
      button.addEventListener('click', function(event) {
        const orderId = this.getAttribute('data-order-id');
        Swal.fire({
          title: 'Are you sure?',
          text: "You are about to cancel this order!",
          icon: 'warning',
          showCancelButton: true,
          confirmButtonText: 'Yes, cancel it!',
          cancelButtonText: 'No, keep it'
        }).then((result) => {
          if (result.isConfirmed) {
            fetch('/cancel-order', {
              method: 'POST',
              headers: { 'Content-Type': 'application/json' },
              body: JSON.stringify({ orderId: orderId })
            })
            .then(response => response.json())
            .then(data => {
              if (data.success) {
                Swal.fire('Cancelled', data.message, 'success');
              } else {
                Swal.fire('Error', data.message, 'error');
              }
            })
            .catch(error => {
              Swal.fire('Error', 'Failed to cancel the order. Please try again.', 'error');
            });
          }
        });
      });
    });

    document.querySelectorAll('.return-button').forEach(button => {
  button.addEventListener('click', function () {
    const orderId = this.getAttribute('data-order-id');
    const returnButton = this;

    Swal.fire({
      title: 'Return Reason',
      input: 'textarea',
      inputPlaceholder: 'Enter the reason for returning the order...',
      showCancelButton: true,
      confirmButtonText: 'Submit',
      cancelButtonText: 'Cancel',
      preConfirm: (reason) => {
        if (!reason.trim()) {
          Swal.showValidationMessage('Please enter a valid return reason');
        } else {
          return reason.trim();
        }
      }
    }).then((result) => {
      if (result.isConfirmed) {
        returnButton.setAttribute('disabled', 'true');
        returnButton.classList.add('disabled');

        fetch('/return-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId: orderId, reason: result.value })
        })
          .then(response => response.json())
          .then(data => {
            if (data.success) {
              Swal.fire('Requested', 'Your return request has been sent.', 'success');
              returnButton.textContent = 'Return Requested';
            } else {
              Swal.fire('Error', data.message, 'error');
              returnButton.removeAttribute('disabled');
            }
          })
          .catch(error => {
            Swal.fire('Error', 'Failed to process your request. Please try again.', 'error');
            returnButton.removeAttribute('disabled');
          });
      }
    });
  });
});






document.querySelectorAll('.retry-button').forEach(button => {
  button.addEventListener('click', async function () {
    const orderId = this.getAttribute('data-order-id');

    try {
      // Fetch order details
      const orderResponse = await fetch(`/getOrderDetails/${orderId}`);
      if (!orderResponse.ok) {
        throw new Error('Failed to fetch order details');
      }

      const orderData = await orderResponse.json();

      if (!orderData || !orderData.refundAmount) {
        throw new Error('Invalid order data');
      }

      const { refundAmount } = orderData;

      // Razorpay configuration
      const options = {
        key: "<%= process.env.RAZORPAY_ID_KEY %>", // Razorpay Key
        amount: refundAmount * 100, // Amount in paise
        currency: "INR",
        name: "Your Shop Name",
        description: "Retry Payment",
        handler: async function (response) {
          // Update payment status in the backend
          const updateResponse = await fetch(`/updatePaymentStatus/${orderId}`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ paymentStatus: 'payment successfully' }),
          });

          if (!updateResponse.ok) {
            throw new Error('Failed to update payment status');
          }

          Swal.fire({
            icon: 'success',
            title: 'payment Successful',
            text: 'The payment status has been updated.',
          }).then(() => {
            window.location.reload();
          });
        },
        theme: { color: "#F37254" },
      };

      const rzp = new Razorpay(options);
      rzp.open();

      rzp.on('payment.failed', function (response) {
        console.error('Payment Failed:', response.error);
        Swal.fire({
          icon: 'error',
          title: 'payment Failed',
          text: 'The retry process could not be completed. Please try again.',
        });
      });

    } catch (error) {
      console.error('Error occurred:', error);
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: 'An error occurred while processing your refund. Please try again later.',
      });
    }
  });
});



document.querySelectorAll('.cancel-button').forEach(button => {
  button.addEventListener('click', function(event) {
    const orderId = this.getAttribute('data-order-id');
    const cancelButton = this;

    Swal.fire({
      title: 'Cancel Order',
      input: 'textarea',
      inputPlaceholder: 'Enter the reason for cancellation...',
      showCancelButton: true,
      confirmButtonText: 'Submit',
      cancelButtonText: 'Cancel',
      preConfirm: (reason) => {
        if (!reason.trim()) {
          Swal.showValidationMessage('Please enter a valid reason for cancellation');
        } else {
          return reason.trim();
        }
      }
    }).then((result) => {
      if (result.isConfirmed) {
        cancelButton.setAttribute('disabled', 'true');
        cancelButton.classList.add('disabled');

        fetch('/cancel-order', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ orderId: orderId, reason: result.value }) // Send reason to backend
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            Swal.fire('Cancelled', 'Your order has been cancelled successfully.', 'success');
            cancelButton.textContent = 'Cancelled';
          } else {
            Swal.fire('Error', data.message, 'error');
            cancelButton.removeAttribute('disabled');
          }
        })
        .catch(error => {
          Swal.fire('Error', 'Failed to cancel the order. Please try again.', 'error');
          cancelButton.removeAttribute('disabled');
        });
      }
    });
  });
});




  </script>
</body>

</html>
