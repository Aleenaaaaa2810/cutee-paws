<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <title>Admin Dashboard - Edit Product</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.css">
  <script src="https://cdn.jsdelivr.net/npm/cropperjs@1.5.13/dist/cropper.min.js"></script>
  <link rel="stylesheet" href="/css/profileadd.css">
  <style>
    /* Add some basic styles for the cropper modal */
    #cropper-modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.8);
      justify-content: center;
      align-items: center;
    }
    #cropper-container {
      background: white;
      padding: 20px;
      border-radius: 5px;
    }
    #cropper-image {
      max-width: 100%;
    }
    /* Style for Delete Button */
.delete-btn {
  background-color: #ff4d4d; /* Red color for delete */
  color: white;
  border: none;
  padding: 5px 10px;
  cursor: pointer;
  font-size: 14px;
  border-radius: 5px;
  transition: background 0.3s ease-in-out;
}

.delete-btn:hover {
  background-color: #cc0000; /* Darker red on hover */
}
/* Style for Update Product Button */
.update-btn {
  background-color: #28a745; /* Green color for success */
  color: white;
  border: none;
  padding: 10px 20px;
  cursor: pointer;
  font-size: 16px;
  border-radius: 5px;
  transition: background 0.3s ease-in-out;
}

.update-btn:hover {
  background-color: #218838; /* Darker green on hover */
}


  </style>
</head>
<body>
  <!-- Sidebar -->
  <%- include("../../views/partials/admin/header.ejs") %>

  <!-- Main content -->
  <div class="main-content">
    <div class="edit-product-form">
      <h2>Edit Product</h2>
      <form action="" id="edit-product-form" method="POST" data-product-id="<%= product._id %>" enctype="multipart/form-data"> 
        <!-- Product Name -->
        <div class="form-group">
          <label for="product-name">Product Name</label>
          <input type="text" id="product-name" name="name" value="<%= product.name %>" required>
        </div>

        <!-- Description -->
        <div class="form-group">
          <label for="description">Full Description</label>
          <textarea id="description" name="description" required><%= product.description %></textarea>
        </div>

        <!-- Regular Price -->
        <div class="form-group">
          <label for="regular-price">Regular Price</label>
          <input type="text" id="regular-price" name="regularPrice" value="<%= product.regularPrice %>" required>
        </div>

        <!-- Sale Price -->
        <div class="form-group">
          <label for="sale-price">Sale Price</label>
          <input type="text" id="sale-price" name="salePrice" value="<%= product.salePrice %>" required>
        </div>

        <!-- Quantity -->
        <div class="form-group">
          <label for="quantity">Quantity</label>
          <input type="number" id="quantity" name="quantity" value="<%= product.quantity %>" required>
        </div>

        <!-- Category -->
        <div class="form-group">
          <label for="category">Category</label>
          <select id="category" name="categoryId" required>
            <% for (let i = 0; i < cat.length; i++) { %>
              <option value="<%= cat[i]._id %>" <%= String(cat[i]._id) === String(product.category) ? 'selected' : '' %>><%= cat[i].name %></option>
            <% } %>
          </select>
        </div>

        <!-- Existing Images -->
        <% product.productImage.forEach((image, index) => { %>
          <div id="image-<%= index %>">
            <img src="/uploads/<%= image %>" alt="Image <%= index + 1 %>" style="width: 50px; height: 60px;">
            <button type="button" class="delete-btn" onclick="deleteImage('<%= product._id %>', '<%= image %>')">Delete</button>
          </div>
        <% }); %>

        <!-- Image Upload -->
        <div class="form-group">
          <label for="image1">Choose Image 1</label>
          <input type="file" id="image1" name="images" accept="image/*" onchange="handleImageUpload(this)">
        </div>

        <div class="form-group">
          <label for="image2">Choose Image 2</label>
          <input type="file" id="image2" name="images" accept="image/*" onchange="handleImageUpload(this)">
        </div>

        <div class="form-group">
          <label for="image3">Choose Image 3</label>
          <input type="file" id="image3" name="images" accept="image/*" onchange="handleImageUpload(this)">
        </div>

        <!-- Submit Button -->
        <button type="submit" class="update-btn">Update Product</button>
      </form>
    </div>
  </div>

  <!-- Cropper Modal -->
  <div id="cropper-modal">
    <div id="cropper-container">
      <img id="cropper-image" src="" alt="Image to crop">
      <button id="crop-button">Crop Image</button>
      <button id="close-cropper">Close</button>
    </div>
  </div>

  <script>
    let cropper;
    let currentInput;

    function handleImageUpload(input) {
      currentInput = input;
      const file = input.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function (e) {
          openCropper(e.target.result);
        };
        reader.readAsDataURL(file);
      }
    }

    function openCropper(imageSrc) {
      document.getElementById('cropper-image').src = imageSrc;
      document.getElementById('cropper-modal').style.display = 'flex';
      cropper = new Cropper(document.getElementById('cropper-image'), {
        aspectRatio: 1, // Set the aspect ratio as needed
        viewMode: 1,
      });
    }

    document.getElementById('crop-button').addEventListener('click', function () {
      const canvas = cropper.getCroppedCanvas();
      canvas.toBlob(function (blob) {
        const file = new File([blob], 'cropped-image.png', { type: 'image/png' });
        const dataTransfer = new DataTransfer();
        dataTransfer.items.add(file);
        currentInput.files = dataTransfer.files;
        document.getElementById('cropper-modal').style.display = 'none';
        cropper.destroy();
      });
    });

    document.getElementById('close-cropper').addEventListener('click', function () {
      document.getElementById('cropper-modal').style.display = 'none';
      if (cropper) {
        cropper.destroy();
      }
    });

    document.getElementById("edit-product-form").addEventListener("submit", async function (event) {
      event.preventDefault();

      // Collect form data
      const form = event.target;
      const name = form.name.value.trim();
      const description = form.description.value.trim();
      const regularPrice = parseFloat(form.regularPrice.value.trim());
      const salePrice = parseFloat(form.salePrice.value.trim());
      const quantity = parseInt(form.quantity.value.trim());
      const categoryId = form.categoryId.value.trim();

      const image1 = form.image1.files[0];
      const image2 = form.image2.files[0];
      const image3 = form.image3.files[0];

      // Validation: Check required fields
      if (!name || !description || isNaN(regularPrice) || isNaN(salePrice) || isNaN(quantity) || !categoryId) {
        Swal.fire('Error', 'All fields are required.', 'error');
        return;
      }

      // Validation: Regular price should be greater than sale price
      if (regularPrice <= salePrice) {
        Swal.fire('Error', 'Regular price must be greater than sale price.', 'error');
        return;
      }

      // Count existing images
      const existingImagesCount = <%= product.productImage.length %>; // Assuming this is the number of existing images

      // Count selected images
      let selectedImageCount = 0;
      if (image1) selectedImageCount++;
      if (image2) selectedImageCount++;
      if (image3) selectedImageCount++;

      // Total images must be at least 3
      if (existingImagesCount + selectedImageCount < 3) {
        Swal.fire('Error', 'You must have at least 3 images', 'error');
        return;
      }

      // If all validations pass, proceed with form submission
      const formData = new FormData(form);

      try {
        const response = await fetch('/admin/updateProduct/<%= product._id %>', {
          method: 'POST',
          body: formData
        });
        const result = await response.json();
        if (result.success) {
          Swal.fire('Success', 'Product updated successfully!', 'success');
        } else {
          Swal.fire('Error', result.error || 'Failed to update product', 'error');
        }
      } catch (err) {
        Swal.fire('Error', 'An unexpected error occurred.', 'error');
      }
    });

    // Delete Image
    async function deleteImage(productId, imageId) {
      try {
        const response = await fetch(`/admin/delete-image/${productId}/${imageId}`, {
          method: 'DELETE',
        });
        const result = await response.json();
        if (response.ok) {
          alert(result.message);
          location.reload(); 
        } else {
          alert(result.message || 'Error deleting image');
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to delete image');
      }
    }

    async function deleteImage(productId, imageId) {
  const confirmation = await Swal.fire({
    title: "Are you sure?",
    text: "You won't be able to revert this!",
    icon: "warning",
    showCancelButton: true,
    confirmButtonColor: "#d33",
    cancelButtonColor: "#3085d6",
    confirmButtonText: "Yes, delete it!",
    cancelButtonText: "Cancel"
  });

  if (confirmation.isConfirmed) {
    try {
      const response = await fetch(`/admin/delete-image/${productId}/${imageId}`, {
        method: 'DELETE',
      });
      const result = await response.json();
      if (response.ok) {
        Swal.fire("Deleted!", "The image has been deleted.", "success").then(() => {
          location.reload(); // Reload the page to update UI
        });
      } else {
        Swal.fire("Error", result.message || "Error deleting image", "error");
      }
    } catch (error) {
      console.error("Error:", error);
      Swal.fire("Error", "Failed to delete image", "error");
    }
  }
}

  </script>
</body>
</html>