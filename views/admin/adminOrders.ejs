<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <title>Admin Dashboard</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Poppins', sans-serif;
        }

        body {
            display: flex;
            min-height: 100vh;
            background-color: #f4f5f7;
            color: #333;
        }

        .sidebar {
            width: 250px;
            background-color: #1e212d;
            color: #ffffff;
            display: flex;
            flex-direction: column;
            position: fixed;
            height: 100%;
            padding-top: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
        }

        .sidebar h2 {
            text-align: center;
            font-size: 24px;
            color: #f5a623;
            margin-bottom: 30px;
        }

        .sidebar a {
            padding: 15px 20px;
            font-size: 18px;
            color: #ffffff;
            text-decoration: none;
            transition: background 0.3s ease, color 0.3s ease;
        }

        .sidebar a:hover {
            background-color: #f5a623;
            color: #1e212d;
        }

        .sidebar a.active {
            background-color: #f5a623;
            color: #1e212d;
            font-weight: bold;
        }

        .main-content {
            margin-left: 250px;
            padding: 30px;
            width: calc(100% - 250px);
            transition: margin-left 0.3s ease;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: #ffffff;
            padding: 20px;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            margin-bottom: 30px;
            border-radius: 10px;
        }

        .header h1 {
            font-size: 24px;
            color: #333;
        }

        

       

        .orders-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 30px;
        }

        .orders-table th, .orders-table td {
            padding: 15px;
            text-align: center;
            border: 1px solid #ddd;
            background-color: #fff;
        }

        .orders-table th {
            background-color: #f5a623;
            color: white;
        }

        .orders-table td {
            background-color: #fafafa;
        }

        .orders-table td a {
            text-decoration: none;
            color: #f5a623;
            font-weight: bold;
            margin-right: 10px;
            transition: color 0.3s ease;
        }

        .orders-table td a:hover {
            color: #e0911c;
        }
        



        .actions-btns {
            display: flex;
            justify-content: center;
        }

        .actions-btns button {
            padding: 8px 15px;
            background-color: #f5a623;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            margin: 0 5px;
            transition: background-color 0.3s ease;
        }

        .actions-btns button:hover {
            background-color: #e0911c;
        }

        .approve-return-button:disabled {
            background-color: #e0e0e0;
            color: #777;
            cursor: not-allowed;
            opacity: 0.6;
        }
/* Basic modal styling */
.modal {
    display: none; /* Hidden by default */
    position: fixed;
    width: 45%; /* Adjust width for better responsiveness */
    max-width: 500px; /* Prevents it from becoming too wide */
    height: auto; /* Adjust height based on content */
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%); /* Center the modal */
    background: #fff;
    padding: 20px;
    border-radius: 8px; /* Rounded corners for a smoother look */
    box-shadow: 0 0 15px rgba(0, 0, 0, 0.3); /* Slightly larger shadow for emphasis */
    z-index: 1000; /* Ensures modal stays on top */
    animation: fadeIn 0.3s ease; /* Add fade-in animation */
}

/* Modal content (heading and text) styling */
.modal h4 {
    font-size: 1.4em;
    margin-bottom: 15px;
    color: #333;
}

.modal p {
    font-size: 1.1em;
    margin-bottom: 15px;
    color: #555;
}

/* Text for the refund amount */
#refundAmount {
    font-weight: bold;
    color: #28a745; /* Green color for refund amount */
}

/* Text for the reason */
#reasonText {
    font-style: italic;
    color: #555;
}

/* Modal action buttons */
.modal-actions {
    display: flex;
    justify-content: space-between;
    margin-top: 20px; /* Space above the buttons */
}

/* Approve button styling */
#approveBtn {
    background-color: #4CAF50; /* Green background */
    color: white;
    border: none;
    padding: 12px 24px;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

#approveBtn:hover {
    background-color: #45a049; /* Darker green on hover */
}

/* Cancel button styling */
.cancel {
    background-color: #f44336; /* Red background */
    color: white;
    border: none;
    padding: 12px 24px;
    cursor: pointer;
    border-radius: 5px;
    transition: background-color 0.3s ease;
}

.cancel:hover {
    background-color: #d32f2f; /* Darker red on hover */
}

/* Animation for modal fade-in */
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.status-success {
    color: green;
    font-weight: bold;
  }
  .status-failed {
    color: red;
    font-weight: bold;
  }
  .status-returned {
    color: blue;
    font-weight: bold;
  }
  .actions-btns button {
    padding: 5px 10px; /* Reduced padding */
    font-size: 10px; /* Smaller text */
    background-color: #f5a623;
    color: white;
    border: none;
    border-radius: 4px; /* Slightly reduced border radius */
    cursor: pointer;
    margin: 0 3px; /* Adjusted margin for better spacing */
    transition: background-color 0.3s ease;
}

.actions-btns button:hover {
    background-color: #e0911c;
}.pagination {
    display: flex;
    justify-content: center;
    margin-top: 20px;
}

.pagination a {
    margin: 0 5px;
    padding: 10px 15px;
    text-decoration: none;
    color: #f1c40f; /* Yellow pagination links */
    border: 1px solid #f1c40f; /* Yellow border */
    border-radius: 4px;
    background-color: #444; /* Dark background */
    transition: background-color 0.3s, color 0.3s;
}

.pagination a:hover {
    background-color: #f1c40f; /* Yellow background on hover */
    color: #1e212d; /* Dark text on hover */
}

.pagination a.active {
    background-color: #e74c3c; /* Red active page */
    color: #fff; /* White text */
    border: none; /* Remove border for active page */
}

.pagination button {
    padding: 10px 15px;
    margin: 0 5px;
    background-color: #f5a623; /* Button background */
    color: white; /* Button text color */
    border: none; /* No border */
    border-radius: 4px; /* Rounded corners */
    cursor: pointer; /* Pointer cursor on hover */
    transition: background-color 0.3s ease; /* Smooth transition */
}

.pagination button:hover {
    background-color: #e0911c; /* Darker shade on hover */
}

.pagination button:disabled {
    background-color: #e0e0e0; /* Gray background for disabled */
    color: #777; /* Gray text for disabled */
    cursor: not-allowed; /* Not allowed cursor */
    opacity: 0.6; /* Slightly transparent */
}



  
        
    </style>
</head>

<body>

    <div class="sidebar">
        <h2>Admin Panel</h2>
        <a href="/admin/dashboard" class="active">Dashboard</a>
        <a href="/admin/customers">Customers</a>
        <a href="/admin/category">Categories</a>
        <a href="/admin/addproducts">Add Product</a>
        <a href="/admin/products">Products</a>
        <a href="/admin/orders">Order manage</a>
        <a href="/admin/coupons">coupon manage</a>
        <a href="/admin/sales-report">salesReport</a>
        <a href="/admin/logout" class="logout-btn">Logout</a>
    </div>

    <div class="main-content">
        <div class="header">
            <h1>Order Management</h1>
        </div>
        <table class="orders-table">
            <thead>
                <tr>
                    <th>Order ID</th>
                    <th>Customer</th>
                    <th>Items</th>
                    <th>Total Price</th>
                    <th>Final amount</th>
                    <th>Status</th>
                    <th>payment Method</th>
                    <th>payment status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <% orders.forEach((order) => { %>
                    <tr>
                        <td><%= order._id %></td>
                        <td>
                            <%= order.user && order.user.name ? order.user.name : 'No name' %>
                            (<%= order.user && order.user.email ? order.user.email : 'No email' %>)
                        </td>
                        <td>
                            <ul>
                                <% order.orderedItems.forEach((item) => { %>
                                    <li><%= item.product.name %> (x<%= item.quantity %>) - ₹<%= item.product.price %></li>
                                <% }) %>
                            </ul>
                        </td>
                        <td>₹<%= order.totalPrice %></td>
                        <td>₹<%= order.finalAmount %></td>

                        <td><%= order.status %></td>

                        <td><%= order.paymentMethod || 'Not Available' %></td>

                        <td class="<%= 
                        (order.status === 'Returned') ? 'status-returned' : 
                        (order.paymentMethod === 'Cash on Delivery' && (order.status === 'Delivered' || order.status === 'Return Requested')) ? 'status-success' :
                        (order.paymentMethod === 'Cash on Delivery') ? 'status-failed' :
                        (order.paymentMethod === 'Wallet' && order.status !== 'Cancelled') ? 'status-success' :  <!-- Fix for Wallet -->
                        (order.paymentMethod === 'Wallet' || order.paymentMethod === 'Razorpay') && order.status === 'Cancelled' ? 'status-failed' : 
                        (order.razorpayDetails && order.razorpayDetails.paymentStatus === 'failed') ? 'status-failed' : 
                        'status-success' 
                      %>">
                        <%= 
                          (order.status === 'Returned') ? 'Returned' :
                          (order.paymentMethod === 'Cash on Delivery' && (order.status === 'Delivered' || order.status === 'Return Requested')) ? 'Success' :
                          (order.paymentMethod === 'Cash on Delivery') ? 'Failed' :
                          (order.paymentMethod === 'Wallet' && order.status !== 'Cancelled') ? 'Success' : <!-- Fix for Wallet -->
                          (order.paymentMethod === 'Wallet' || order.paymentMethod === 'Razorpay') && order.status === 'Cancelled' ? 'Failed' :
                          (order.razorpayDetails ? order.razorpayDetails.paymentStatus : 'Failed') 
                        %>
                      </td>
                      

      

                        <td class="actions-btns">
                            <style>
                                .disabled-btn {
                                    background-color: gray;
                                    color: white;
                                    cursor: not-allowed;
                                    opacity: 0.6;
                                }
                            </style>
                            
                            <button 
                                onclick="updateStatus('<%= order._id %>')" 
                                class="<%= (order.status === 'Cancelled' || order.status === 'Returned' || order.status === 'Delivered' || order.status ==='Return Requested') ? 'disabled-btn' : '' %>" 
                                <%= (order.status === 'Cancelled' || order.status === 'Returned' || order.status === 'Delivered'||order.status === 'Return Requested') ? 'disabled' : '' %>
                            >
                                Update Status
                            </button>
                            
                            <% if (order.returnRequested && order.status === 'Return Requested') { %>
                                <button class="btn approve-return-button"
                                        data-order-id="<%= order._id %>"
                                        data-refund-amount="<%= order.totalPrice %>"
                                        data-reason="<%= order.returnReason %>"
                                        onclick="showApproveModal('<%= order._id %>', '<%= order.finalAmount %>', '<%= order.returnReason %>')">
                                    Approve Return    
                                </button>
                             
                              <% } else { %>
                                <button class="btn approve-return-button" disabled>Approve Return</button>
                              <% } %>

                              <button 
                              class="btn cancel-reason-button <%= order.status === 'Cancelled' ? '' : 'disabled-btn' %>" 
                              data-order-id="<%= order._id %>"
                              data-reason="<%=  order.cancelReason ? order.cancelReason.replace(/"/g, '&quot;').replace(/'/g, '&#39;') : 'No reason provided' %>"
                              <%= order.status === 'Cancelled' ? '' : 'disabled' %>
                            >
                              Cancel Reason
                            </button>

                                                  </td>

                                                  
                    </tr>
                <% }) %>
            </tbody>
        </table>
        <div class="pagination">
           
        
            <% 
                let startPage = Math.max(1, pagination.currentPage - 2);
                let endPage = Math.min(pagination.totalPages, startPage + 4);
        
                if (endPage - startPage < 4) {
                    startPage = Math.max(1, endPage - 4);
                }
        
                if (startPage > 1) { 
            %>
                <a href="?page=1">1</a>
                <% if (startPage > 2) { %>
                    <span>...</span>
                <% } %>
            <% } %>
        
            <% for (let i = startPage; i <= endPage; i++) { %>
                <a href="?page=<%= i %>" class="<%= pagination.currentPage === i ? 'active' : '' %>"><%= i %></a>
            <% } %>
        
            <% if (endPage < pagination.totalPages) { %>
                <% if (endPage < pagination.totalPages - 1) { %>
                    <span>...</span>
                <% } %>
                <a href="?page=<%= pagination.totalPages %>"><%= pagination.totalPages %></a>
            <% } %>
        
        </div>
        
    </div>
    <div id="approveModal" class="modal">
        <div class="modal-content">
            <h4>Approve Return</h4>
            <p>Total Refund Amount: ₹<span id="refundAmount"></span></p>
            <p>Reason for Return: <span id="reasonText"></span></p> <!-- Reason is displayed here -->
            <div class="modal-actions">
                <button id="approveBtn" class="btn" onclick="submitApproval(currentOrderId)">Approve</button>
                <button onclick="closeModal()" class="btn cancel">Deny</button>
            </div>
        </div>

    </div>
   
      
    
    <script>
        const updateStatus = (orderId) => {
            const statusOptions = ['Pending', 'Processing', 'Shipped', 'Delivered', 'Cancelled'];

            Swal.fire({
                title: 'Select new status',
                input: 'select',
                inputOptions: statusOptions.reduce((acc, status) => {
                    acc[status] = status;
                    return acc;
                }, {}),
                inputPlaceholder: 'Select status',
                showCancelButton: true,
                confirmButtonText: 'Update Status',
                cancelButtonText: 'Cancel',
            }).then((result) => {
                if (result.isConfirmed) {
                    const selectedStatus = result.value;

                    fetch(`/admin/orders/${orderId}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status: selectedStatus }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        Swal.fire({
                            icon: 'success',
                            title: 'Status updated successfully!',
                            text: 'Click OK to continue.',
                            confirmButtonText: 'OK',
                        });
                    })
                    .catch(error => {
                        Swal.fire({
                            icon: 'error',
                            title: 'Error updating status',
                            text: error.message,
                        });
                    });
                }
            });
        };

        let currentOrderId = null;

        
// Show approve modal
const showApproveModal = (orderId, finalAmount, reason) => {
    currentOrderId = orderId;
    document.getElementById('refundAmount').textContent = finalAmount;
    document.getElementById('reasonText').textContent = reason; // Show the reason in the modal
    document.getElementById('approveModal').style.display = 'block';
};

// Close the modal
const closeModal = () => {
    const modal = document.getElementById('approveModal');
    modal.style.display = 'none';
};

// Approve return request
const submitApproval = (orderId) => {
    const refundAmount = document.getElementById('refundAmount').textContent;
    fetch(`/admin/approve-return/${orderId}`, {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ finalAmount: refundAmount })
    })

    
    .then(response => response.json())
    .then(data => {
        Swal.fire({
            icon: 'success',
            title: 'Return Approved',
            text: 'Return has been successfully approved.',
            confirmButtonText: 'OK',
        });
        closeModal();
        toggleApproveReturnButton(orderId, false); // Disable the approve button after approval
    })
    .catch(error => {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Something went wrong while processing the return.',
        });
    });
};

// Toggle the approve return button
function toggleApproveReturnButton(orderId, isReturnRequested) {
    const button = document.querySelector(`[data-order-id="${orderId}"]`);
    button.disabled = !isReturnRequested;
}

document.querySelectorAll('.cancel-reason-button').forEach(button => {
  button.addEventListener('click', function() {
    const orderId = this.getAttribute('data-order-id');
    const reason = this.getAttribute('data-reason') || 'No reason provided';

    Swal.fire({
      title: 'Cancellation Reason',
      text: reason,
      icon: 'info'
    });
  });
});



    
    </script>

</body>
</html>